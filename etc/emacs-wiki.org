#+TITLE: 记录一些 Emacs Wiki
#+STARTUP: overview

* rg
** rg 搜索 emasc-application-framework 下的所有源代码文件
下面是一个很好的范例
#+BEGIN_SRC sh
  fd -e py -E /app/*/node_modules -I -e el -X rg atomic[_-]edit --color always
#+END_SRC
刚刚发现我甚至不需要先用 fd 来做一次文件过滤，直接 rg 就可以在这么多文件中暴力搜出来，而且用时也差不多！！！（只测试了emasc-application-framework）
#+BEGIN_SRC sh
  rg atomic[_-]edit --hidden --no-ignore
#+END_SRC

** counsel-rg
看了 counsel-rg 的文档发现可以指定参数。

举个例子：
比如，我想搜索隐藏文件中的 "some" 这个字符串
我可以在 counsel-rg 中输入 "some -- --hidden"，这样就可以把 =--hidden= 这个参数传给 rg 了
** deadgrep
在结果界面，选 "glob" 这个按钮，然后输入 =*= 就可以了。应该就是让 rg 搜索所有文件的意思
* 自带的功能

- org-occur :: 
- auto-save-visited-mode :: 自动保存
- subword-mode :: 把 StudlyCapsIdentifiers 当作一个 word
- glasses-mode :: 把 areYouReady 显示成 are_You_Ready
- superword-mode :: 把 this_is_a_symbol 当作一个 word
- list-charset-chars :: 
- shortdoc-display-group ::
- customize-create-theme :: 这个命令可以自己定制一个主题出来，好像还挺好玩的
- profiler-start :: 

* 有用的变量
- mouse-wheel-scroll-amount :: 滚轮和修饰键的组合行为
- mouse-wheel-progressive-speed :: 滚轮速度的行为
- completion-at-point-functions :: 
- org-link-file-path-type ::
- auto-hscroll-mode :: 

* compile emacs

** with native json
#+begin_src sh
  apt install libjansson-dev
#+end_src

** with svg
#+begin_src sh
  sudo apt install librsvg2-dev
#+end_src

* Snippets
使用自带 tool-tip
#+BEGIN_SRC emacs-lisp
  (setq x-gtk-use-system-tooltips nil)
#+END_SRC

[[https://emacs-china.org/t/word/19878][来源（Emacs-China）]]
#+begin_src emacs-lisp
  (setq sentence-end "\\([。！？]\\)[ \t\n]*")
#+end_src

#+begin_src emacs-lisp
  (convert-standard-filename FILENAME)
#+end_src

一个好厉害的命令
#+begin_src emacs-lisp
  quail-show-keyboard-layout
#+end_src

* 根据时间自动切换主题
#+BEGIN_SRC emacs-lisp
  ;; autoswitch theme by time
  (let ((hour (string-to-number
               (substring (current-time-string) 11 13))))
    (if (member hour (number-sequence 6 17))
        (load-theme 'modus-operandi t)
      (load-theme 'modus-vivendi t)))
#+END_SRC
* emacs28 更新后报 wrong-number-of-arguments #<subr string-match> 4
总结：需要重新编译一下 elc 。比较简单的做法就是把所有相关的包卸载重新安装即可
参考连接：[[https://github.com/magit/magit/discussions/4554][Weird "wrong-number-of-arguments #<subr string-match> 4" error on Emacs 28 · Discussion #4554 · magit/magit]]
* 一个基于 ivy 的很有意思的解决方案，记录备忘一下
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") (li (let ((ivy-height 1)) (swiper-isearch))))
#+END_SRC
* 记录一些 option
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)  ;关闭 backup 功能，即不生成 =~= 后缀文件
  (setq split-height-threshold nil)
  (setq frame-resize-pixelwise t)
  (setq comment-empty-lines t)
  (setq auto-hscroll-mode 'current-line)	;设置成 current-line 的时候，鼠标点的时候会抽风，不好用
  (setq auto-hscroll-mode 't)
  (setq hscroll-step 2)
#+END_SRC
* consult 关闭自动预览
#+BEGIN_SRC emacs-lisp
  (setq consult-preview-key nil)		;不自动预览
#+END_SRC
* 窗口居中
#+BEGIN_SRC emacs-lisp
  ;; @REF: https://christiantietze.de/posts/2021/06/emacs-center-window-single-function/
  (defun my/frame-recenter (&optional frame)
    "Center FRAME on the screen.
  FRAME can be a frame name, a terminal name, or a frame.
  If FRAME is omitted or nil, use currently selected frame."
    (interactive)
    (unless (eq 'maximised (frame-parameter nil 'fullscreen))
      (let* ((frame (or (and (boundp 'frame)
			      frame)
			(selected-frame)))
	     (frame-w (frame-pixel-width frame))
	     (frame-h (frame-pixel-height frame))
	     ;; frame-monitor-workarea returns (x y width height) for the monitor
	     (monitor-w (nth 2 (frame-monitor-workarea frame)))
	     (monitor-h (nth 3 (frame-monitor-workarea frame)))
	     (center (list (/ (- monitor-w frame-w) 2)
			   (/ (- monitor-h frame-h) 2))))
	(apply 'set-frame-position (flatten-list (list frame center))))))
  (add-hook 'after-make-frame-functions #'my/frame-recenter)
#+END_SRC
* eshell/j
#+BEGIN_SRC emacs-lisp
  ;; @REF https://www.emacswiki.org/emacs/EshellAutojump
  (defun eshell/j (&rest args)
    "Jump to a directory you often cd to.
  This compares the argument with the list of directories you usually jump to.
  Without an argument, list the ten most common directories.
  With a positive integer argument, list the n most common directories.
  Otherwise, call `eshell/cd' with the result."
    (setq args (eshell-flatten-list args))
    (let ((arg (or (car args) 10))
          (map (make-hash-table :test 'equal))
          (case-fold-search (eshell-under-windows-p))
          candidates
          result)
      ;; count paths in the ring and produce a map
      (dolist (dir (ring-elements eshell-last-dir-ring))
        (if (gethash dir map)
            (puthash dir (1+ (gethash dir map)) map)
          (puthash dir 1 map)))
      ;; use the map to build a sorted list of candidates
      (maphash (lambda (key value)
                 (setq candidates (cons key candidates)))
               map)
      (setq candidates (sort candidates
                             (lambda (a b)
                               (> (gethash a map)
                                  (gethash b map)))))
      ;; list n candidates or jump to most popular candidate
      (if (and (integerp arg) (> arg 0))
          (progn
            (let ((n (nthcdr (1- arg) candidates)))
              (when n
                (setcdr n nil)))
            (eshell-lisp-command
             (mapconcat (lambda (s)
                          (format "%4d %s" (gethash s map) s))
                        candidates "\n")))
        (while (and candidates (not result))
          (if (string-match arg (car candidates))
              (setq result (car candidates))
            (setq candidates (cdr candidates))))
        (eshell/cd result))))
#+END_SRC
* “遍历--中断” 示例代码 
#+BEGIN_SRC emacs-lisp
  (defun goto-term ()
    (interactive)
    (catch 'done
      (dolist (buf (buffer-list))
        (with-current-buffer buf
          (when (eq major-mode 'term-mode)
            (throw 'done (switch-to-buffer buf)))))))
#+END_SRC
* find-name-dired 用起来！
* (setq tab-always-indent 'complete)
这个选项在大多数情况下很带来比较好的结果：可以用 tab 键做更多的事情，而且操作符合 bash 中习惯。但最近发现了一些问题：在 org 中使用 yasnippet ，如 <sh 这个 snippets 。按 tab 键的时候，它总是给我提供一个补全选项，调用的是 ivy overlay 的补全窗口。而且此时按 C-g 取消后，就看不到光标了。必须把当前 buffer 关闭再打开才能重新看到光标。

影响范围挺大的，暂时弃用了。
* duplicate-current-line
#+BEGIN_SRC emacs-lisp
  ;; @see https://www.emacswiki.org/emacs/CopyingWholeLines
  ;; duplicate current line
  (defun duplicate-current-line (&optional n)
    "duplicate current line, make more than 1 copy given a numeric argument"
    (interactive "p")
    (save-excursion
      (let ((nb (or n 1))
            (current-line (thing-at-point 'line)))
        ;; when on last line, insert a newline first
        (when (= 1 (forward-line 1))
          (insert "\n"))
      
        ;; now insert as many time as requested
        (while (> n 0)
          (insert current-line)
          (decf n)))))
#+END_SRC
* <C-M-backspace> 在系统层面绑定了 kill xorg 命令
* Rime 输入法相关链接备忘

小鹤双拼方案地址: https://github.com/cnfeat/Rime

小鹤音形方案地址: http://flypy.ys168.com/ 这个链接中的“小鹤音形挂
接第三方平台”文件夹linux对应的是macos，win10对应的就是win10

小鹤音形连写方案地址: https://github.com/brglng/rime-xhup

动态链接相关地址（Win10），Linux 不需要折腾，开箱即用

librime 动态链接下载地址：https://github.com/DogLooksGood/emacs-rime/issues/64#issuecomment-605436317

一些说明: 最近更新的 rime 需要重新编译 librime-emacs.dll，但我的
windows 编译环境没有配好，一直用的是上面链接提供的。目前发现一个
workaround: 修改 rime 源码相应部分，不让它重新编译。便采用了 submodule
的方法

* rime mode line indicator 自己魔改的版本
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'rime
    ;; 下面的设置会覆盖默认信息，但我只是想添加这个指示信息，便有了
    ;; `fei-rime-lighter'，

    ;; (setq mode-line-mule-info '((:eval (rime-lighter))))

    (add-to-list 'mode-line-mule-info '((:eval (fei-rime-lighter))))
    (setq-default mode-line-mule-info mode-line-mule-info)

    (defun fei-rime-lighter ()
      "rewrite `rime-lighter' "
      (if (and (equal current-input-method "rime")
               (bound-and-true-p rime-mode))
          (if (and (rime--should-enable-p)
                   (not (rime--should-inline-ascii-p)))
              (propertize
               (char-to-string 12563)
               'face
               'rime-indicator-face)
            (propertize
             (char-to-string 12563)
             'face
             'rime-indicator-dim-face))
        ""))
    )
#+END_SRC

* Ibuffer 配置备份
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-show-empty-filter-groups nil) ;; 不显示空组
  (setq ibuffer-movement-cycle nil)
  (add-hook 'ibuffer-mode-hook #'hl-line-mode)
  ;; (add-hook 'ibuffer-mode-hook #'ibuffer-auto-mode) 

  ;;; ibuffer group
  (setq ibuffer-saved-filter-groups
        '(("default"
           ("C/C++" (or (name . "^.*\\.c$")
                        (name . "^.*\\.cpp$")))
           ("Matlab" (name . "^.*\\.m$"))
           ("Lisp" (or (name . "^.*\\.el$")
                       (mode . emacs-lisp-mode)))
           ("EAF" (mode . eaf-mode))
           ("Org" (or (mode . org-mode)
                      (mode . org-agenda-mode)))
           ("Dired" (mode . dired-mode))
           ("Emacs" (or (mode . eshell-mode)
                        (name . "^\\*ielm\\*$")))
           ("PDF" (name . "^.*\\.pdf$"))
           ;; 下面这个是贪婪匹配，就是匹配 * 开头和结尾所有句子（包括空格）
           ("Files" (not (name . "^\\*.*\\*$")))
           )))
#+END_SRC

* Font 配置备忘
#+BEGIN_SRC emacs-lisp
  (if *is-windows*
      ;; Setting English Font 仅在 windows 生效
      (progn
        (set-face-attribute
         'default nil
         :font "DejaVu Sans Mono for Powerline"
         :height 140)
        ;; Setting Chinese Font
        (set-fontset-font t '(#x4e00 . #x9fff) "Microsoft Yahei")))

  ;; @REF https://emacs-china.org/t/windows-emacs/7907/39
  ;; 下面这个配置当我需要更换其他的字体的时候，加上下面这一行，也可以保证中英文的对齐
  (set-fontset-font "fontset-default" 'unicode'("等距更纱黑体 SC"))
#+END_SRC

* 让 consult 和 eaf 更好的工作
#+BEGIN_SRC emacs-lisp
;; 下面 patch 的功能：
;;	1. 支持 consult-buffer 打开 pdf 是用 eaf-pdf-viewer 打开 （起因）
;;	2. 可以简化 eaf.el 中代码
;;	3. 可以使 dired 中行为与 emacs 的设计保持一致。
;;	现在 eaf.el 的逻辑是：如果有 mark 的文件，会一次性打开所有的文件。但通过我的测试发现
;;	emacs 中 dired-find-alternate-file/dired-find-file 的默认行为不是一次性打开所有 mark 的文件，
;;	而是只打开光标所在的文件。而我的这个 patch 则保证着同样的行为。更合理。

;; 下面 patch 已知的问题：
;;	1. 在 dired buffer 中按 o(dired-find-file-other-window) 工作不按照预期
(defun fei-eaf--find-file-noselect-advisor (orig-fn file &rest args)
  "Advisor of `find-file' that opens EAF supported file using EAF.

It currently identifies PDF, videos, images, and mindmap file extensions."
  (let ((fn (if (commandp 'eaf-open)
                #'(lambda (file)
                    (eaf-open file)
		    (buffer-name))
              orig-fn))
        (ext (file-name-extension file)))
    (if (and (not (eq major-mode 'telega-chat-mode)) ; 处理 telega 打开图片的问题
	     (eaf--find-file-ext-p ext))
        (apply fn file nil)
      (apply orig-fn file args))))
(advice-add #'find-file-noselect :around #'fei-eaf--find-file-noselect-advisor)

(advice-remove 'find-file 'eaf--find-file-advisor)
(advice-remove 'dired-find-file 'eaf--dired-find-file-advisor)
(advice-remove 'dired-find-alternate-file 'eaf--dired-find-file-advisor)
#+END_SRC

